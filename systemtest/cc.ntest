# -*-Perl-*-

# cc.ntest -
#
# Exercise basic components of ECSCM-ClearCase plugin
#
# Copyright (c) 2005-2010 Electric Cloud, Inc.
# All rights reserved

use strict;

# read in setup and tests that are common to all ECSCM plugin 
# system tests
my $commonFile =  "$::gTestFileDir/../../ECSCM/systemtest/ntest.common";
open F, "< $commonFile";
my $code = do { local $/; <F> };
close F;
eval  $code ;

ntest "check-checkout-present", {}, sub {
    # Check that the plugin contains required components
    my $xpath = $::N->getSteps("$::gPlugin_name","CheckoutCode");
    assertOK($xpath,"get steps");
    assertEq("checkParams", $xpath->findvalue("//step[1]/stepName"), "step 1 is checkParams");
    assertEq("checkoutMethod", $xpath->findvalue("//step[2]/stepName"), "step 2 is checkoutMethod");
};

ntest "check-getSCMTag-present", {}, sub {
    my $xpath = $::N->getSteps("$::gPlugin_name","getSCMTag");
    assertOK($xpath, "get steps");
    assertEq("tagMethod", $xpath->findvalue("//step[1]/stepName"), "step 1 is getSCMTag");

};

ntest "check-Preflight-present", {}, sub {
    my $xpath = $::N->getSteps("$::gPlugin_name","Preflight");
    assertOK($xpath, "get steps");
    assertEq("preflight", $xpath->findvalue("//step[1]/stepName"), "step 1 is preflight");

};

ntest "check-config code-present", {}, sub {
    my $xpath = $::N->getProperty("/projects/$::gPlugin_name/scm_driver/$::gPlugin_driver" . "::Cfg");
    assertOK($xpath,"get cfg property");
    assertNe("", $xpath->findvalue("//value"), "Config Code");
};

ntest "check-driver code-present", {}, sub {
    my $xpath = $::N->getProperty("/projects/$::gPlugin_name/scm_driver/$::gPlugin_driver" . "::Driver");
    assertOK($xpath,"get driver property");
};

# Tests specific or customized to this SCM
ntest "setup-import test project", {}, sub {
    assertOK($::N->import(
             { file =>"$::gTestFileDir/import.xml",
               path  => "/projects/ECSCM Tests",
               force => 1
             } ), "import test project");
    assertOK($::N->getProcedure("ECSCM Tests", "cctest"),"cctest procedure exists");
};


ntest "setup-create configuration", {}, sub {
    my $xpath = $::N->runProcedure("$::gPlugin_name", 
        { procedureName => "CreateConfiguration",
          pollInterval  => '0.2',
          timeout       => 600,
          actualParameter => [ 
            { actualParameterName => 'config', value => "test" }, 
            { actualParameterName => 'desc', value => "ClearCase config" }, 
          ],
          credential => [ 
            { credentialName => 'test', userName => "qa", password => "qa", },
          ],
        });

    assertOK($xpath, "run create configuration procedure");
    # make sure it finished
    my $jobId = 0;
    my $status = "";
    assertDef($xpath, "runProcedure finished without a timeout");
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }

    # examine log files
    $xpath = $::N->getJobDetails($jobId);

    writeFile("$::gCurrentTestDir/createConfiguration.log","====Job Details====\n$xpath->{_xml}\n");

    # check that the config and credential exist
    $xpath = $::N->getProperty("/projects/$::ECSCM/scm_cfgs/test/scmPlugin");
    assertEq("ECSCM-ClearCase",$xpath->findvalue("//value")->string_value,"config type");
};

################################################################################
# Errors thrown by these tests are due (most proabably) to a corrupt
# test VOB. A new VOB needs to be created, populated, etc.
# -- Ed C. 1/5/2012
################################################################################

ntest "run-end to end", {haveScmAgent => 1, knownBug => "ECPSCMCLEARCASE-15"}, sub {
    # run test job
    my $xpath = $::N->runProcedure("ECSCM Tests", 
        { procedureName => "cctest",
          pollInterval  => '1',
          timeout       => 600,
            actualParameter => [
            {actualParameterName => 'resource', value => "$::gAgentResource"},
            {actualParameterName => 'platform', value => "$::gPlatform"},
            ]
        });
    log_xml(__LINE__, $xpath, "runProcedure");

    # make sure it finished
    my $jobId = 0;
    my $status = "";
    assertOK($xpath, "runProcedure finished");
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }

    # Did the job run error free?
    assert('', 'eq', errors($xpath), "runProcedure returned error-free");

    # examine log files
    $xpath = $::N->getJobDetails($jobId);
    log_xml(__LINE__, $xpath, "getJobDetails");
    assertOK( $xpath, "getJobDetails" );
    assertEq('', errors($xpath), "getJobDetails returned error-free");

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace[1]/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace[1]/unix");
    }
    return if assertNe($ws, '', "Found a logfile name");

    # Get the name of the log file for checkoutCode
    my $logFileName = $ws . "/"
        . $xpath->findvalue("//jobStep[stepName='checkoutMethod']/calledProcedure/jobStep[stepName='runMethod']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);
    return if assertNe($data, '', "Read data");

    # check that files were really checked out
    my $exists = (-e "$ws/cc-src/scmtest2/file1");
    assertEq(1,$exists, "SCM Checked out file1");

    writeFile("$::gCurrentTestDir/checkoutCode.log","====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    my $change = 0;
    if($data =~ '.*checkoutCode returned (.*)'){
        $change = $1;
    }
    assertTrue($change && int($change) > 0,'checkoutCode - valid changelist found in log');
    assert('Error:', '!~', $data, "Data is error-free");

    # Get the name of the log file for tagMethod
    $logFileName = $ws . "/"
        . $xpath->findvalue("//jobStep[stepName='tagMethod']/calledProcedure/jobStep[stepName='runMethod']/logFileName");
    # Read the log file and verify its contents.
    $data = readFile($logFileName);
    return if assertNe($data, '', "Read data");

    writeFile("$::gCurrentTestDir/getSCMTag.log",$data);

    $change = 0;
    if($data =~ '.*getSCMTag returned (.*)'){
        $change = $1;
    }
    assertTrue($change && int($change) > 0,'getSCMTag - valid changelist found in log');
    assert('Error:', '!~', $data, "Data is error-free");
};

ntest "run-preflight", {haveScmAgent => 1, knownBug => "ECPSCMCLEARCASE-15"}, sub {

    # The agent needs to know the server name, but gTarget is probably
    # "localhost" which does us no good.  Find the real name of the
    # local host and pass it to the agent
    my $serverName = "$::gTarget";
    if ( "$::gTarget" eq "localhost" ) {
        $serverName = hostname();
    }
    log_msg(__LINE__, "", "serverName: %s", $serverName);

    my $procedureName = "cc_preflight_client";
    my $config_param  = "/myProject/cc-1.preflight";
    my $src_dir       = "src/scmtest2";

    # Run test job
    my $xpath = $::N->runProcedure(
        "ECSCM Tests",
        {
            procedureName   => "$procedureName",
            pollInterval    => '1',
            timeout         => 600,
            actualParameter => [
                {
                    actualParameterName => 'resource',
                    value               => "$::gAgentResource"
                },
                {
                    actualParameterName => 'cmdr_server',
                    value               => "$serverName"
                },
                {
                    actualParameterName => 'test',
                    value               => "$config_param"
                },
            ]
        }
    );
    log_xml(__LINE__, $xpath, "runProcedure");

    # Make sure it finished
    assertOK( $xpath, "runProcedure finished" );
    my $jobId  = $xpath->findvalue("//jobId");
    my $status = $xpath->findvalue("//status");
    assertTrue($jobId && $jobId ne "",'valid job id');
    assertEq( 'completed', $status, "job $jobId complete" );

    # Abort if job did not finish
    if ( $status ne "completed" ) {
        assertOK( $::N->abortJob( $jobId, { force => 1 } ) );
    }

    # Did the job run error free?
    assert('', 'eq', errors($xpath), "runProcedure returned error-free");

    # Examine log files
    $xpath = $::N->getJobDetails($jobId);
    log_xml(__LINE__, $xpath, "getJobDetails");
    assertOK( $xpath, "getJobDetails" );
    return if assertEq('', errors($xpath), "getJobDetails returned error-free");

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if ( !isWindows() ) {
        $ws = $xpath->findvalue("//workspace/unix");
    }
    return if assertNe($ws, '', "Found the workspace name");
    log_msg(__LINE__, "", "Root of the log files: ws: %s", $ws);

    # Get the name of the log file for ecclientpreflight
    my $clientLogFileName = $xpath->findvalue(
        "//jobStep[stepName='ecclientpreflight']/logFileName");
    return if assertNe($clientLogFileName, '', "Found the logfile name");
    $clientLogFileName = "$ws/$clientLogFileName";
    log_msg(__LINE__, "", "Name of the log file for ecclientpreflight: %s", $clientLogFileName);

    # Read the log file and verify its contents.
    my $clientData = readFile($clientLogFileName);
    log_msg(__LINE__, "", "clientDate:\n%s", $clientData);

    my $agentJobId;
    if($clientData =~ 'JOB ID: ([0-9]*)'){
        $agentJobId = $1;
    }
    assertTrue( $agentJobId && int($agentJobId) > 0,
        'agent jobid found in log' );
    writeFile( "$::gCurrentTestDir/clientpreflight.log",
        "====Job Details====\n$xpath->{_xml}\n====LOG====\n$clientData\n" );

    log_msg(__LINE__, "", "agentJobId: %d", $agentJobId);


    $::N->waitForJob( $agentJobId, 60 );

    # now get the details of the agent job
    log_msg(__LINE__, "", "--- Agent job details");
    $xpath = $::N->getJobDetails($agentJobId);
    log_xml(__LINE__, $xpath, "getJobDetails");
    assertOK( $xpath, "getJobDetails" );
    #assertEq('', errors($xpath), "getJobDetails returned error-free");

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    $ws = $xpath->findvalue("//workspace/winUNC");
    if ( !isWindows() ) {
        $ws = $xpath->findvalue("//workspace/unix");
    }
    return if assertNe($ws, '', "Found the workspace name");
    log_msg(__LINE__, "", "Root of the agent log files: ws: %s", $ws);

    # Get the name of the log file for agent
    my $agentLogFileName = $xpath->findvalue(
        "//jobStep[stepName='preflight']/calledProcedure/jobStep[stepName='runMethod']/logFileName"
        );
    return if assertNe($agentLogFileName, '', "Found the logfile name");
    $agentLogFileName = "$ws/$agentLogFileName";
    log_msg(__LINE__, "", "Name of the agent log file: %s", $agentLogFileName);

    my $agentData = readFile($agentLogFileName);
    log_msg(__LINE__, "", "agentData:\n%s", $agentData);
    return if assertNe($agentData, '', "Read data");

    # Modified file
    my $exists = ( -e "$ws/$src_dir/file1" ) || 0;
    assertEq( 1, $exists, "SCM Checked out file1" );
    my $content = `cat $ws/$src_dir/file1`;
    $content =~ s/\s*$//; #chomp $content;  # chomp doesn't delete \r
    log_msg(__LINE__, "", "Modified file: content:\n%s", $content);
    assertEq( "preflight", $content, "SCM Modified file1" );

    # Deleted file

    # $exists = ( -e "$ws/$src_dir/file2" ) || 0;
    # assertEq( 0, $exists, "SCM Deleted file2" );
    # if($exists){
    #   assertEq('', "$ws/$src_dir", "ws/src_dir");
    #   assertEq('', `ls -l $ws/$src_dir`);
    # }

    #---------------
    # Check the client log for the removed file.  The "src" directory
    # in the agent workspace still contains the physical file.

# Output (in the client log file) from cleartool diff
#
# -------------[ removed ]---------------|---------------------------------------
# file2  16-Apr.14:36 build              |-
# ---------------------------------------|---------------[ added ]---------------
#                                       -| file3  19-Apr.16:52 build

    my $fileDeleted = 'No';
    if($clientData =~ 'file2 .*\|-'){
        $fileDeleted = 'Yes';
    }
    assertEq( 'Yes', $fileDeleted, "SCM Deleted file2" );

    # Added file
    $exists = ( -e "$ws/$src_dir/file3" ) || 0;
    assertEq( 1, $exists, "SCM Created file3" );
    writeFile( "$::gCurrentTestDir/agentpreflight.log",
        "====Job Details====\n$xpath->{_xml}\n====LOG====\n$agentData\n" );

};


#-----------------------------------------------------------------

# ntest "cc_tag_ClearCaseBranch_blank", {haveScmAgent => 1}, sub {

#     my $procedureName = "cc tag - ClearCaseBranch - blank";
#     my $stepName      = "cc tag - ClearCaseBranch - blank";

#     my $serverName = "$::gTarget";
#     if ( "$::gTarget" eq "localhost" ) {
#         $serverName = hostname();
#     }

#     # Run the procedure
#     my $xpath = $::N->runProcedure(
#         "ECSCM Tests",
#         {
#             procedureName   => "$procedureName",
#             pollInterval    => '1',
#             timeout         => 600,
#             actualParameter => [
#                 {
#                     actualParameterName => 'resource',
#                     value               => "$::gAgentResource"
#                 },
#             ]
#         }
#     );
#     log_xml(__LINE__, $xpath, "runProcedure");

#     # Make sure it finished

#     #assertOK( $xpath, "runProcedure finished" );
#     #   - expecting an error.

#     #print "\n\n\n", $xpath->findnodes_as_string("/*"), "\n\n"; # Print the XML

#     my $jobId  = $xpath->findvalue("//jobId");
#     my $status = $xpath->findvalue("//status");
#     assertTrue($jobId && $jobId ne "",'valid job id');
#     assertEq( 'completed', $status, "job $jobId complete" );
#     if ( $status ne "completed" ) {
#         assertOK( $::N->abortJob( $jobId, { force => 1 } ) );
#     }

#     # Check the outcome
#     my $outcome = $xpath->findvalue("//outcome");
#     assertEq( 'error', $outcome, "job $jobId status: error" );

#     # Get the error code and message
#     $xpath = $::N->getJobDetails($jobId);
#     log_xml(__LINE__, $xpath, "getJobDetails");
#     my $errorCode = $xpath->findvalue(qq{//jobStep[stepName="$stepName"]/errorCode});

#     # Assertions
#     assertSubstring("FORMAL_PARAMETER_ERROR", $errorCode, "checkoutCode");
# };

# ntest "cc_tag_ClearCaseBranch_invalid", {haveScmAgent => 1}, sub {

#     my $procedureName = "cc tag - ClearCaseBranch - invalid";

#     my $serverName = "$::gTarget";
#     if ( "$::gTarget" eq "localhost" ) {
#         $serverName = hostname();
#     }

#     # Run the procedure
#     my $xpath = $::N->runProcedure(
#         "ECSCM Tests",
#         {
#             procedureName   => "$procedureName",
#             pollInterval    => '1',
#             timeout         => 600,
#             actualParameter => [
#                 {
#                     actualParameterName => 'resource',
#                     value               => "$::gAgentResource"
#                 },
#             ]
#         }
#     );
#     log_xml(__LINE__, $xpath, "runProcedure");

#     # Make sure it finished
#     assertOK( $xpath, "runProcedure finished" );
#     my $jobId  = $xpath->findvalue("//jobId");
#     my $status = $xpath->findvalue("//status");
#     assertTrue($jobId && $jobId ne "",'valid job id');
#     assertEq( 'completed', $status, "job $jobId complete" );
#     if ( $status ne "completed" ) {
#         assertOK( $::N->abortJob( $jobId, { force => 1 } ) );
#     }

#     # Check the outcome
#     my $outcome = $xpath->findvalue("//outcome");
#     assertEq( 'error', $outcome, "job $jobId outcome: $outcome" );

#     # Get the step log
#     $xpath = $::N->getJobDetails($jobId);
#     log_xml(__LINE__, $xpath, "getJobDetails");
#     assertOK( $xpath, "getJobDetails" );
#     #print "\n\n\n", $xpath->findnodes_as_string("/*"), "\n\n"; # Print the XML
#     my $ws = $xpath->findvalue("//workspace/winUNC");
#     if ( !isWindows() ) {
#         $ws = $xpath->findvalue("//workspace/unix");
#     }
#     my $agentLogFileName = $xpath->findvalue(
#       qq{//calledProcedure/jobStep[stepName="runMethod"]/logFileName}
#       );
#     assertTrue( "$agentLogFileName", "Step-log name");
#     $ws .= "/$agentLogFileName";
#     my $data = readFile("$ws");

#     # Assertions
#     assertSubstring(q{cleartool: Error: Branch type not found: "bogus"}, $data, "runMethod");
# };

# ntest "cc_tag_ClearCasePath_blank", {haveScmAgent => 1}, sub {

#     my $procedureName = "cc tag - ClearCasePath - blank";
#     my $stepName      = "cc tag - ClearCasePath - blank";

#     my $serverName = "$::gTarget";
#     if ( "$::gTarget" eq "localhost" ) {
#         $serverName = hostname();
#     }

#     # Run the procedure
#     my $xpath = $::N->runProcedure(
#         "ECSCM Tests",
#         {
#             procedureName   => "$procedureName",
#             pollInterval    => '1',
#             timeout         => 600,
#             actualParameter => [
#                 {
#                     actualParameterName => 'resource',
#                     value               => "$::gAgentResource"
#                 },
#             ]
#         }
#     );
#     log_xml(__LINE__, $xpath, "runProcedure");

#     # Make sure it finished

#     #assertOK( $xpath, "runProcedure finished" );
#     #   - expecting an error.

#     #print "\n\n\n", $xpath->findnodes_as_string("/*"), "\n\n"; # Print the XML

#     my $jobId  = $xpath->findvalue("//jobId");
#     my $status = $xpath->findvalue("//status");
#     assertTrue($jobId && $jobId ne "",'valid job id');
#     assertEq( 'completed', $status, "job $jobId complete" );
#     if ( $status ne "completed" ) {
#         assertOK( $::N->abortJob( $jobId, { force => 1 } ) );
#     }

#     # Check the outcome
#     my $outcome = $xpath->findvalue("//outcome");
#     assertEq( 'error', $outcome, "job $jobId status: error" );

#     # Get the error code and message
#     $xpath = $::N->getJobDetails($jobId);
#     log_xml(__LINE__, $xpath, "getJobDetails");
#     my $errorCode = $xpath->findvalue(qq{//jobStep[stepName="$stepName"]/errorCode});

#     # Assertions
#     assertSubstring("FORMAL_PARAMETER_ERROR", $errorCode, "checkoutCode");
# };

# ntest "cc_tag_ClearCasePath_invalid", {haveScmAgent => 1}, sub {

#     my $procedureName = "cc tag - ClearCasePath - invalid";

#     my $serverName = "$::gTarget";
#     if ( "$::gTarget" eq "localhost" ) {
#         $serverName = hostname();
#     }

#     # Run the procedure
#     my $xpath = $::N->runProcedure(
#         "ECSCM Tests",
#         {
#             procedureName   => "$procedureName",
#             pollInterval    => '1',
#             timeout         => 600,
#             actualParameter => [
#                 {
#                     actualParameterName => 'resource',
#                     value               => "$::gAgentResource"
#                 },
#             ]
#         }
#     );
#     log_xml(__LINE__, $xpath, "runProcedure");

#     # Make sure it finished
#     assertOK( $xpath, "runProcedure finished" );
#     my $jobId  = $xpath->findvalue("//jobId");
#     my $status = $xpath->findvalue("//status");
#     assertTrue($jobId && $jobId ne "",'valid job id');
#     assertEq( 'completed', $status, "job $jobId complete" );
#     if ( $status ne "completed" ) {
#         assertOK( $::N->abortJob( $jobId, { force => 1 } ) );
#     }

#     # Check the outcome
#     my $outcome = $xpath->findvalue("//outcome");
#     assertEq( 'error', $outcome, "job $jobId outcome: $outcome" );

#     # Get the step log
#     $xpath = $::N->getJobDetails($jobId);
#     log_xml(__LINE__, $xpath, "getJobDetails");
#     assertOK( $xpath, "getJobDetails" );
#     #print "\n\n\n", $xpath->findnodes_as_string("/*"), "\n\n"; # Print the XML
#     my $ws = $xpath->findvalue("//workspace/winUNC");
#     if ( !isWindows() ) {
#         $ws = $xpath->findvalue("//workspace/unix");
#     }
#     my $agentLogFileName = $xpath->findvalue(
#       qq{//calledProcedure/jobStep[stepName="runMethod"]/logFileName}
#       );
#     assertTrue( "$agentLogFileName", "Step-log name");
#     $ws .= "/$agentLogFileName";
#     my $data = readFile("$ws");

#     # Assertions
#     assertSubstring("cleartool: Error: Unable to access", $data, "runMethod");
# };

# ntest "cc_tag_ClearCaseView_blank", {haveScmAgent => 1}, sub {

#     my $procedureName = "cc tag - ClearCaseView - blank";
#     my $stepName      = "cc tag - ClearCaseView - blank";

#     my $serverName = "$::gTarget";
#     if ( "$::gTarget" eq "localhost" ) {
#         $serverName = hostname();
#     }

#     # Run the procedure
#     my $xpath = $::N->runProcedure(
#         "ECSCM Tests",
#         {
#             procedureName   => "$procedureName",
#             pollInterval    => '1',
#             timeout         => 600,
#             actualParameter => [
#                 {
#                     actualParameterName => 'resource',
#                     value               => "$::gAgentResource"
#                 },
#             ]
#         }
#     );
#     log_xml(__LINE__, $xpath, "runProcedure");

#     # Make sure it finished

#     #assertOK( $xpath, "runProcedure finished" );
#     #   - expecting an error.

#     #print "\n\n\n", $xpath->findnodes_as_string("/*"), "\n\n"; # Print the XML

#     my $jobId  = $xpath->findvalue("//jobId");
#     my $status = $xpath->findvalue("//status");
#     assertTrue($jobId && $jobId ne "",'valid job id');
#     assertEq( 'completed', $status, "job $jobId complete" );
#     if ( $status ne "completed" ) {
#         assertOK( $::N->abortJob( $jobId, { force => 1 } ) );
#     }

#     # Check the outcome
#     my $outcome = $xpath->findvalue("//outcome");
#     assertEq( 'error', $outcome, "job $jobId status: error" );

#     # Get the error code and message
#     $xpath = $::N->getJobDetails($jobId);
#     log_xml(__LINE__, $xpath, "getJobDetails");
#     my $errorCode = $xpath->findvalue(qq{//jobStep[stepName="$stepName"]/errorCode});

#     # Assertions
#     assertSubstring("FORMAL_PARAMETER_ERROR", $errorCode, "checkoutCode");
# };

# ntest "cc_tag_ClearCaseView_invalid", {haveScmAgent => 1}, sub {

#     my $procedureName = "cc tag - ClearCaseView - invalid";

#     my $serverName = "$::gTarget";
#     if ( "$::gTarget" eq "localhost" ) {
#         $serverName = hostname();
#     }

#     # Run the procedure
#     my $xpath = $::N->runProcedure(
#         "ECSCM Tests",
#         {
#             procedureName   => "$procedureName",
#             pollInterval    => '1',
#             timeout         => 600,
#             actualParameter => [
#                 {
#                     actualParameterName => 'resource',
#                     value               => "$::gAgentResource"
#                 },
#             ]
#         }
#     );
#     log_xml(__LINE__, $xpath, "runProcedure");

#     # Make sure it finished
#     assertOK( $xpath, "runProcedure finished" );
#     my $jobId  = $xpath->findvalue("//jobId");
#     my $status = $xpath->findvalue("//status");
#     assertTrue($jobId && $jobId ne "",'valid job id');
#     assertEq( 'completed', $status, "job $jobId complete" );
#     if ( $status ne "completed" ) {
#         assertOK( $::N->abortJob( $jobId, { force => 1 } ) );
#     }

#     # Check the outcome
#     my $outcome = $xpath->findvalue("//outcome");
#     assertEq( 'error', $outcome, "job $jobId outcome: $outcome" );

#     # Get the step log
#     $xpath = $::N->getJobDetails($jobId);
#     log_xml(__LINE__, $xpath, "getJobDetails");
#     assertOK( $xpath, "getJobDetails" );
#     #print "\n\n\n", $xpath->findnodes_as_string("/*"), "\n\n"; # Print the XML
#     my $ws = $xpath->findvalue("//workspace/winUNC");
#     if ( !isWindows() ) {
#         $ws = $xpath->findvalue("//workspace/unix");
#     }
#     my $agentLogFileName = $xpath->findvalue(
#       qq{//calledProcedure/jobStep[stepName="runMethod"]/logFileName}
#       );
#     assertTrue( "$agentLogFileName", "Step-log name");
#     $ws .= "/$agentLogFileName";
#     my $data = readFile("$ws");

#     # Assertions
#     assertSubstring(q{cleartool: Error: View tag not found: "bogus"}, $data, "runMethod");
# };

# ntest "cc_tag_config_blank", {haveScmAgent => 1}, sub {

#     my $procedureName = "cc tag - config - blank";

#     my $serverName = "$::gTarget";
#     if ( "$::gTarget" eq "localhost" ) {
#         $serverName = hostname();
#     }

#     # Run the procedure
#     my $xpath = $::N->runProcedure(
#         "ECSCM Tests",
#         {
#             procedureName   => "$procedureName",
#             pollInterval    => '1',
#             timeout         => 600,
#             actualParameter => [
#                 {
#                     actualParameterName => 'resource',
#                     value               => "$::gAgentResource"
#                 },
#             ]
#         }
#     );
#     log_xml(__LINE__, $xpath, "runProcedure");

#     # Make sure it finished
#     assertOK( $xpath, "runProcedure finished" );
#     my $jobId  = $xpath->findvalue("//jobId");
#     my $status = $xpath->findvalue("//status");
#     assertTrue($jobId && $jobId ne "",'valid job id');
#     assertEq( 'completed', $status, "job $jobId complete" );
#     if ( $status ne "completed" ) {
#         assertOK( $::N->abortJob( $jobId, { force => 1 } ) );
#     }

#     # Check the outcome
#     my $outcome = $xpath->findvalue("//outcome");
#     assertEq( 'error', $outcome, "job $jobId outcome: $outcome" );

#     # Get the step log
#     $xpath = $::N->getJobDetails($jobId);
#     log_xml(__LINE__, $xpath, "getJobDetails");
#     assertOK( $xpath, "getJobDetails" );
#     #print "\n\n\n", $xpath->findnodes_as_string("/*"), "\n\n"; # Print the XML
#     my $ws = $xpath->findvalue("//workspace/winUNC");
#     if ( !isWindows() ) {
#         $ws = $xpath->findvalue("//workspace/unix");
#     }
#     my $agentLogFileName = $xpath->findvalue(
#       qq{//calledProcedure/jobStep[stepName="runMethod"]/logFileName}
#       );
#     assertTrue( "$agentLogFileName", "Step-log name");
#     $ws .= "/$agentLogFileName";
#     my $data = readFile("$ws");

#     # Assertions
#     assertSubstring("Could not find configuration default", $data, "runMethod");
# };

# ntest "cc_test_ConfigSpecFileName_blank", {haveScmAgent => 1}, sub {

#     my $procedureName = "cc test - ConfigSpecFileName - blank";
#     my $stepName      = "cc test - ConfigSpecFileName - blank";

#     my $serverName = "$::gTarget";
#     if ( "$::gTarget" eq "localhost" ) {
#         $serverName = hostname();
#     }

#     # Run the procedure
#     my $xpath = $::N->runProcedure(
#         "ECSCM Tests",
#         {
#             procedureName   => "$procedureName",
#             pollInterval    => '1',
#             timeout         => 600,
#             actualParameter => [
#                 {
#                     actualParameterName => 'resource',
#                     value               => "$::gAgentResource"
#                 },
#             ]
#         }
#     );
#     log_xml(__LINE__, $xpath, "runProcedure");

#     # Make sure it finished

#     #assertOK( $xpath, "runProcedure finished" );
#     #   - expecting an error.

#     #print "\n\n\n", $xpath->findnodes_as_string("/*"), "\n\n"; # Print the XML

#     my $jobId  = $xpath->findvalue("//jobId");
#     my $status = $xpath->findvalue("//status");
#     assertTrue($jobId && $jobId ne "",'valid job id');
#     assertEq( 'completed', $status, "job $jobId complete" );
#     if ( $status ne "completed" ) {
#         assertOK( $::N->abortJob( $jobId, { force => 1 } ) );
#     }

#     # Check the outcome
#     my $outcome = $xpath->findvalue("//outcome");
#     assertEq( 'error', $outcome, "job $jobId status: error" );

#     # Get the error code and message
#     $xpath = $::N->getJobDetails($jobId);
#     log_xml(__LINE__, $xpath, "getJobDetails");
#     my $errorCode = $xpath->findvalue(qq{//jobStep[stepName="$stepName"]/errorCode});

#     # Assertions
#     assertSubstring("FORMAL_PARAMETER_ERROR", $errorCode, "checkoutCode");
# };

# ntest "cc_test_ConfigSpecFileName_invalid", {haveScmAgent => 1}, sub {

#     my $procedureName = "cc test - ConfigSpecFileName - invalid";

#     my $serverName = "$::gTarget";
#     if ( "$::gTarget" eq "localhost" ) {
#         $serverName = hostname();
#     }

#     # Run the procedure
#     my $xpath = $::N->runProcedure(
#         "ECSCM Tests",
#         {
#             procedureName   => "$procedureName",
#             pollInterval    => '1',
#             timeout         => 600,
#             actualParameter => [
#                 {
#                     actualParameterName => 'resource',
#                     value               => "$::gAgentResource"
#                 },
#             ]
#         }
#     );
#     log_xml(__LINE__, $xpath, "runProcedure");

#     # Make sure it finished
#     assertOK( $xpath, "runProcedure finished" );
#     my $jobId  = $xpath->findvalue("//jobId");
#     my $status = $xpath->findvalue("//status");
#     assertTrue($jobId && $jobId ne "",'valid job id');
#     assertEq( 'completed', $status, "job $jobId complete" );
#     if ( $status ne "completed" ) {
#         assertOK( $::N->abortJob( $jobId, { force => 1 } ) );
#     }

#     # Check the outcome
#     my $outcome = $xpath->findvalue("//outcome");
#     assertEq( 'error', $outcome, "job $jobId outcome: $outcome" );

#     # Get the step log
#     $xpath = $::N->getJobDetails($jobId);
#     log_xml(__LINE__, $xpath, "getJobDetails");
#     assertOK( $xpath, "getJobDetails" );
#     #print "\n\n\n", $xpath->findnodes_as_string("/*"), "\n\n"; # Print the XML
#     my $ws = $xpath->findvalue("//workspace/winUNC");
#     if ( !isWindows() ) {
#         $ws = $xpath->findvalue("//workspace/unix");
#     }
#     my $agentLogFileName = $xpath->findvalue(
#       qq{//calledProcedure/jobStep[stepName="runMethod"]/logFileName}
#       );
#     assertTrue( "$agentLogFileName", "Step-log name");
#     $ws .= "/$agentLogFileName";
#     my $data = readFile("$ws");

#     # Assertions
#     assertSubstring(q{cleartool: Error: Unable to open file "bogus"}, $data, "runMethod");
# };

# ntest "cc_test_dest_blank", {haveScmAgent => 1}, sub {

#     my $procedureName = "cc test - dest - blank";
#     my $stepName      = "cc test - dest - blank";

#     my $serverName = "$::gTarget";
#     if ( "$::gTarget" eq "localhost" ) {
#         $serverName = hostname();
#     }

#     # Run the procedure
#     my $xpath = $::N->runProcedure(
#         "ECSCM Tests",
#         {
#             procedureName   => "$procedureName",
#             pollInterval    => '1',
#             timeout         => 600,
#             actualParameter => [
#                 {
#                     actualParameterName => 'resource',
#                     value               => "$::gAgentResource"
#                 },
#             ]
#         }
#     );
#     log_xml(__LINE__, $xpath, "runProcedure");

#     # Make sure it finished

#     #assertOK( $xpath, "runProcedure finished" );
#     #   - expecting an error.

#     #print "\n\n\n", $xpath->findnodes_as_string("/*"), "\n\n"; # Print the XML

#     my $jobId  = $xpath->findvalue("//jobId");
#     my $status = $xpath->findvalue("//status");
#     assertTrue($jobId && $jobId ne "",'valid job id');
#     assertEq( 'completed', $status, "job $jobId complete" );
#     if ( $status ne "completed" ) {
#         assertOK( $::N->abortJob( $jobId, { force => 1 } ) );
#     }

#     # Check the outcome
#     my $outcome = $xpath->findvalue("//outcome");
#     assertEq( 'error', $outcome, "job $jobId status: error" );

#     # Get the error code and message
#     $xpath = $::N->getJobDetails($jobId);
#     log_xml(__LINE__, $xpath, "getJobDetails");
#     my $errorCode = $xpath->findvalue(qq{//jobStep[stepName="$stepName"]/errorCode});

#     # Assertions
#     assertSubstring("FORMAL_PARAMETER_ERROR", $errorCode, "checkoutCode");
# };

